#!/usr/bin/env raku

use v6.e.PREVIEW;

sub get_abs_path($path) {
  return $path if $path ~~ /^ \/ /; 
  return "{$*CWD}/{$path}";
}

#| Create symlink with or without destination argument
sub MAIN($target, $link-location?) {

  my $abs-target = get_abs_path($target);
  my $final-link-location = $link-location // "/usr/local/bin";
  $final-link-location ~= "/{$abs-target.IO.basename}" if $final-link-location.IO.d;

  mkdir $final-link-location.IO.dirname;
  symlink $abs-target, $final-link-location;

  say "Symbolic link created for $abs-target at $final-link-location";
}


# Asterisk (*) and Special Variables
#
# The asterisk (*)  preceding CWD has a special meaning in Raku. It signals that
# CWD is a part of a dynamic variable family.  Here's a breakdown:
#
# Dynamic Variables: These variables aren't tied to lexical scopes like variables
# you declare with my. They often hold runtime information about the program or
# environment.
# The * Family: Variables marked with * usually provide global information
# relevant to how your program executes. Some other members of this family
# include:
# $*OUT: The standard output handle
# $*ERR: The standard error handle
# $*PID: The current process ID
# Why Is $*CWD Necessary?
#
# The  reason $*CWD is used, rather than relying on a  plain CWD form, stems from
# the nature of relative paths and how your process might be run.  Dynamic
# variables ensure access to  the correct, most-up-to-date   working directory,
# even if changes occur during script execution.


# my $final-link-location = "{$link-location}/{$abs-target.IO.basename}" if $link-location.IO.d // "/usr/local/bin";

# my $final-link-location = "{$link-location // '/usr/local/bin'}/{$abs-target.IO.basename}"
# if ($link-location // '/usr/local/bin').IO.d;


# class LinkCreator {
#     # Encapsulate the symlink creation logic within a method
#     method create-symlink(Str $target, Str $link-location?) {
#         my $abs-target = self.get-abs-path($target);
# 	my $final-link-location = $link-location // "/usr/local/bin";
# 	# $final-link-location = "{$final-link-location}/{$abs-target.IO.basename}" if $final-link-location.IO.d;
#
#         mkdir $final-link-location.IO.dirname;
#         symlink $abs-target, $final-link-location;
#
#         say "Symbolic link created for $abs-target at $final-link-location";
#     }
#
#     method get-abs-path($path) {
#         return $path if $path ~~ rx/^ \/ /;
#         return "{$*CWD}/{$path}";
#     }
# }
#
# multi sub MAIN('test') {
#     use Test;
#     use Test::Mock;
#
#     my $mock = mocked(LinkCreator);
#
#     plan 1;
#
#     $mock.create-symlink("test.toml", "~/");
#     check-mock($mock,
#         *.called('create-symlink', with => \( "test.toml", "~/" )), # Use the same argument as passed to the method
#     );
#
#     plan 2;
#
#     $mock.create-symlink("test.toml");
#     check-mock($mock,
#         *.called('create-symlink', with => \( "test.toml" )), # Use the same argument as passed to the method
#     );
# }
